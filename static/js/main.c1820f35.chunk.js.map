{"version":3,"sources":["serviceWorker.js","SearchRobots.js","Card.js","CardList.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchRobots","_ref","searchfield","searchValueChange","react_default","a","createElement","type","placeholder","onChange","className","Card","props","src","concat","id","alt","name","email","CardList","robots","CardArray","map","user","i","src_Card_0","key","Scroll","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchAction","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","_this3","filteredRobots","filter","robot","toLowerCase","includes","src_SearchRobots","src_Scroll","src_CardList","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCLSC,EAXM,SAAAC,GAAsCA,EAApCC,YAAoC,IAAvBC,EAAuBF,EAAvBE,kBAChC,OACIC,EAAAC,EAAAC,cAAA,SACAC,KAAK,SACLC,YAAY,kBACZC,SAAUN,EACVO,UAAU,eCQHC,EAZF,SAACC,GACV,OACIR,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACXN,EAAAC,EAAAC,cAAA,OAAKO,IAAG,wBAAAC,OAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,WAC1DZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKM,EAAMK,MACXb,EAAAC,EAAAC,cAAA,SAAIM,EAAMM,UCMXC,EAbE,SAAAlB,GAAc,IAAZmB,EAAYnB,EAAZmB,OACTC,EAAYD,EAAOE,IAAI,SAACC,EAAMC,GAChC,OACIpB,EAAAC,EAAAC,cAACmB,EAAD,CAAMC,IAAKN,EAAOI,GAAGT,GAAIA,GAAIK,EAAOI,GAAGT,GAAIE,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,UAG1F,OACId,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACVW,ICDEM,EARA,SAACf,GACZ,OACIR,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrClB,EAAMmB,WCuCJC,cAtCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdzCZ,EAAKa,MAAQ,CACT1B,OAAQ,GACRuB,YAAa,IAJRV,mFASM,IAAAc,EAAAX,KACfY,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAA7B,GAAM,OAAI2B,EAAKL,SAAS,CAAEtB,8CAO5B,IAAAgC,EAAAhB,KACEiB,EAAiBjB,KAAKU,MAAM1B,OAAOkC,OACrC,SAAAC,GACI,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASL,EAAKN,MAAMH,YAAYa,iBAGxE,OACIpD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACXN,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACoD,EAAD,CAAcvD,kBAAmBiC,KAAKI,iBACtCpC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUxC,OAAQiC,aAhCpBQ,aCGlBC,IAASC,OACL3D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0D,EAAD,OAEFC,SAASC,eAAe,SNqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.c1820f35.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst SearchRobots = ({searchfield, searchValueChange}) => {\r\n    return(\r\n        <input \r\n        type=\"search\" \r\n        placeholder=\"Find your robot\" \r\n        onChange={searchValueChange}\r\n        className=\"searchBox\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchRobots;\r\n","import React from 'react';\r\n\r\n// robohash.org\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"cardBox\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt='robots' />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const CardArray = robots.map((user, i)=>{\r\n        return (\r\n            <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        );\r\n    });\r\n    return(\r\n        <div className=\"robotsCards\">\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport SearchRobots from './SearchRobots';\r\nimport CardList from './CardList';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n    \r\n// source https://jsonplaceholder.typicode.com/users\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(robots => this.setState({ robots }));\r\n    }\r\n\r\n    onSearchAction = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(\r\n            robot => {\r\n                return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n            }\r\n        )\r\n        return (\r\n            <div className=\"content\">\r\n                <h1>RoboFriends</h1>\r\n                <SearchRobots searchValueChange={this.onSearchAction}/>\r\n                <hr />\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './Card.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <App />\r\n    </div>\r\n    , document.getElementById('root')\r\n    );\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}